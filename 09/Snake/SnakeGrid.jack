class SnakeGrid {
    field Array grid;           // will be Array[x][y] elements
    field int free_segments;    // track the amount of free segments, used for finding new
                                // apple spawn point
    field Random rand;          // generate not so random integers for apple placement
    field Apple apple;          // store the apple location

    // static variables
    static int SEGMENT_SIZE;    // SEGMENT_SIZE of rectangle, also figure exact pixel by
                                // multiplying x or y by SEGMENT_SIZE (constant)
    static int SCREEN_WIDTH;    // screen width in pixels
    static int SCREEN_HEIGHT;   // screen height in pixels
    static int COLUMNS;
    static int ROWS;
    static int NUM_SEGMENTS;
    static int MAX_X_PIXEL;     // largest x pixel index (constant)
    static int MAX_Y_PIXEL;     // largest y pixel index (constant)
    

    /**
     * Construct a new SnakeGrid. Mark all grid locations as free initially (false)
     */
    constructor SnakeGrid new(int seed) {
        var int x_index;
        var int y_index;
        var Array y_array;

        // setup statics
        do SnakeGrid.init();

        let rand = Random.new(seed);

        // set up fields
        let grid = Array.new(COLUMNS);

        // loop through all x's and assign new array of y's
        let x_index = 0;
        while (x_index < COLUMNS) {
            let y_array = Array.new(ROWS);         // create the new array
            let y_index = 0;                    // index to iterate new array
            while (y_index < ROWS) {
                let y_array[y_index] = false;    // make each element false (unoccupied)
                let y_index = y_index + 1;              // move on
            }
            
            let grid[x_index] = y_array;     // finally, store the y_array array at the current index
            let x_index = x_index + 1;
        }

        let free_segments = NUM_SEGMENTS;

        let apple = Apple.new();

        return this;
    }

    /**
     * Configure static variables
     */
    function void init() {
        // setup statics
        let SEGMENT_SIZE = 16;
        let SCREEN_HEIGHT = 256;
        let SCREEN_WIDTH = 512;
        let MAX_X_PIXEL = SCREEN_WIDTH - 1;
        let MAX_Y_PIXEL = SCREEN_HEIGHT - 1;
        let COLUMNS = SCREEN_WIDTH / SEGMENT_SIZE;
        let ROWS = SCREEN_HEIGHT / SEGMENT_SIZE;
        let NUM_SEGMENTS = ROWS * COLUMNS;
        return;
    }

    /**
     * Mark a grid location as occupied (true) and draw the segment to the screen
     */
    method void setOccupied(int x, int y) {
        var Array y_array;

        let y_array = grid[x];
        let y_array[y] = true;
        let free_segments = free_segments - 1;

        do drawSegment(x, y);
        return;
    }

    /**
     * Mark a grid location as free (false) and erase the segment from the screen
     */
    method void setFree(int x, int y) {
        var Array y_array;

        let y_array = grid[x];
        let y_array[y] = false;
        let free_segments = free_segments + 1;

        do eraseSegment(x, y);
        return;
    }

    /**
     * Return true if the grid location is occupied, false otherwise
     */
    method boolean isOccupied(int x, int y) {
        var Array y_array;

        let y_array = grid[x];
        return y_array[y];
    }

    /**
     * Draw a single segment onto the screen at the coordinates specified
     */
    method void drawSegment(int _x, int _y) {
        var int x_pixel;
        var int y_pixel;

        // draw the rectangle
        let x_pixel = _x * SEGMENT_SIZE;
        let y_pixel = _y * SEGMENT_SIZE;
        do Screen.setColor(true);
        do Screen.drawRectangle(x_pixel, y_pixel, x_pixel + SEGMENT_SIZE - 1, y_pixel + SEGMENT_SIZE - 1);

        return;
    }

    /**
     * Erase the segment from the screen at the coordinates specified
     */
    method void eraseSegment(int _x, int _y) {
        var int x_pixel;
        var int y_pixel;

        let x_pixel = _x * SEGMENT_SIZE;
        let y_pixel = _y * SEGMENT_SIZE;

        do Screen.setColor(false);
        do Screen.drawRectangle(x_pixel, y_pixel, x_pixel + SEGMENT_SIZE - 1, y_pixel + SEGMENT_SIZE - 1);

        return;
    }

    /**
     * Return true if the coordinates specified has something in it, or is out of bounds.
     * Return false otherwise
     */
    method boolean collision(int new_x, int new_y) {
        var int x_pixel;
        var int y_pixel;

        let x_pixel = new_x * SEGMENT_SIZE;
        let y_pixel = new_y * SEGMENT_SIZE;

        // check for collisions at edge of screen
        if ((x_pixel < 0) | (y_pixel < 0)) {
            return true;
        }
        if ((x_pixel + SEGMENT_SIZE - 1) > MAX_X_PIXEL) {
            return true;
        }
        if ((y_pixel + SEGMENT_SIZE - 1) > MAX_Y_PIXEL) {
            return true;
        }

        // check for collisions of the snake itself
        if (isOccupied(new_x, new_y)) {
            return true;
        }

        // if we got this far, no collisions!
        return false;
    }

    /**
     * Find an unoccupied segment and spawn the apple there
     * Returns true if the apple was successfully spawned.
     * Returns false if there were no open segments (end game)
     */
    method boolean spawnApple() {
        var int x_index;
        var int y_index;
        var Array y_array;
        var int free_segment_count;
        var int free_segment_offset;

        if (free_segments = 0) {
            return false;
        }

        // index will be between 1 and free_segments (inclusive)
        let free_segment_offset = rand.rand(free_segments);
        // tracks the # of times we have encountered a free segment
        let free_segment_count = 0;

        let x_index = 0;
        while (x_index < COLUMNS) {
            let y_array = grid[x_index];
            let y_index = 0;
            while (y_index < ROWS) {
                if (y_array[y_index] = false) {
                    let free_segment_count = free_segment_count + 1;
                    if (free_segment_count = free_segment_offset) {
                        // create apple here
                        do apple.setLocation(x_index, y_index);

                        // draw apple
                        do setOccupied(x_index, y_index);

                        // break out of loop
                        let y_index = ROWS;
                        let x_index = COLUMNS;
                    }
                }
                let y_index = y_index + 1;
            }
            let x_index = x_index + 1;
        }
        
        return true;
    }

    method boolean isApple(int x, int y) {
        if ((x = apple.x()) & (y = apple.y())) {
            return true;
        } else {
            return false;
        }
    }

    method void eatApple() {
        do setFree(apple.x(), apple.y());
        return;
    }

    /**
     * Free up memory used by grid
     */
    method void dispose() {
        var int x_index;
        var int y_index;
        var Array y_array;

        while (x_index < COLUMNS) {
            let y_array = grid[x_index];
            do y_array.dispose();
            let x_index = x_index + 1;
        }
        do grid.dispose();
        do apple.dispose();
        do rand.dispose();
        do Memory.deAlloc(this);
        return;
    }
}