class SnakeGame {
    field Snake snake;

    constructor SnakeGame new() {
        return this;
    }

    method void run() {
        var boolean running;
        var char key;
        var int seed;

        let running = true;
        let key = 0;

        do Output.printString("Welcome to SNAKE.");
        do Output.println();
        do Output.printString("Eat apples, grow, eat more apples.");
        do Output.println();
        do Output.printString("Make sure you dont bite your body or go out of bounds!");
        do Output.println();
        do Output.println();
        do Output.printString("Press any key to start.");

        // do nothing until a key is pressed
        // also generate a seed here to pass to random # generator so 
        // apples dont spawn in same place every time.
        let seed = 0;
        while (key = 0) {
            let key = Keyboard.keyPressed();
            let seed = seed + 1;
            if (seed = 32766) {
                let seed = 0;
            }
        }

        // clear screen
        do Screen.clearScreen();

        let snake = Snake.new(10, 10, 2, seed);

        while (running) {
            // move the snake
            let key = Keyboard.keyPressed();
            if (key = 132) { do snake.setDirection(4); }       // right arrow
            if (key = 130) { do snake.setDirection(3); }       // left arrow
            if (key = 133) { do snake.setDirection(2); }       // down arrow
            if (key = 131) { do snake.setDirection(1); }       // up arrow
            if (~snake.move()) {
                let running = false;
            }
            do Sys.wait(100);  // delays the next movement

        }

        do Screen.clearScreen();

        // end game
        do Output.moveCursor(0, 0);
        do Output.printString("Game Over! You ate ");
        do Output.printInt(snake.applesEaten());
        do Output.printString(" apples!");

        do snake.dispose();
        
        do dispose();
        return;
    }

    method void updateDirection(int new_direction) {
        do snake.setDirection(new_direction);
        return;
    }

    method void dispose() {
        //do snake.dispose();
        do Memory.deAlloc(this);
        return;
    }
}