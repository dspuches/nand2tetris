class Snake {
    field SnakeSegment head;    // the snake body is a doubly linked list, head of snake
    field SnakeSegment tail;    // tail of snake
    field SnakeGrid grid;       // tracks what squares in the game grid are occupied
    field int apples_eaten;

    static int direction;       // 1 - up
                                // 2 - down
                                // 3 - left
                                // 4 - right
    

    /** 
     * Build a new Snake at x, y, with num_segments additional segments
     */
    constructor Snake new(int x, int y, int num_segments, int seed) {
        var int index;
        do Snake.init();

        let grid = SnakeGrid.new(seed);
        
        do addSegment(x, y);
        let index = 1;
        while (index < num_segments) {
            do addSegment(x + index, y);
            let index = index + 1;
        }

        let apples_eaten = 0;

        do grid.spawnApple();
        return this;
    }

    /**
     * Initialize static variables and constants
     */
    function void init() {
        let direction = 4;
        return;
    }

    method int applesEaten() {
        return apples_eaten;
    }

    /**
     * Adds a new SnakeSegment to the head of the snake
     */
    method void addSegment(int x, int y) {
        var SnakeSegment segment;

        let segment = SnakeSegment.new(x, y);
        do grid.setOccupied(x, y);
        
        if ((head = null) & (tail = null)) {
            // if no segments exist, point head and tail to the new segment
            let head = segment;
            let tail = segment;
            do segment.setNext(null);
            do segment.setPrev(null);
        } else {
            // insert segment as new head
            do head.setPrev(segment);
            do segment.setNext(head);
            let head = segment;
        }
        return;
    }

    /**
     * Delete the tail snake segment
     */
    method void deleteTailSegment() {
        var SnakeSegment temp;
        var int _x;
        var int _y;

        if (tail = null) {
            return;
        }

        // get the tail, its x, and y
        let temp = tail;
        let _x = temp.x();
        let _y = temp.y();

        let tail = tail.getPrev();
        do tail.setNext(null);
        do Memory.deAlloc(temp);
        do grid.setFree(_x, _y);
        return;
    }

    /**
     * Sets the new direction if it is appropriate. Direction can only be changed
     * perpendicular to the current direction. If moving right or left, new direction
     * can only be up or down. If moving up or down, new direction can only be left
     * or right.  If an incorrect direction is passed to the method, no action is taken
     */
    method void setDirection(int new_direction) {
        var boolean update_direction;

        let update_direction = false;

        // if we are moving right or left...
        if ((direction = 4) | (direction = 3)) {
            // only allow new direction to be up or down
            if ((new_direction = 1) | (new_direction = 2)) {
                let update_direction = true;
            }
        }

        // if we are moving up or down...
        if ((direction = 2) | (direction = 1)) {
            // only allow new direction to be left or right
            if ((new_direction = 4) | (new_direction = 3)) {
                let update_direction = true;
            }
        }

        if (update_direction) {
            let direction = new_direction;
        }
        return;
    }

    /**
     * Move the snake one block in its specified direction.
     * Returns false if a collision occured attempting to move the snake
     */
    method boolean move() {
        var boolean moved;

        let moved = false;

        if (direction = 4) {
            if (moveRight()) {
                let moved = true;
            }
        }
        if (direction = 3) {
            if (moveLeft()) {
                let moved = true;
            }
        }
        if (direction = 2) {
            if (moveDown()) {
                let moved = true;
            }
        }
        if (direction = 1 ) {
            if (moveUp()) {
                let moved = true;
            }
        }
        return moved;
    }

    /**
     * Move the snake one block right. If a collision occurs, return
     * false and do not move the snake
     */
    method boolean moveRight() {  
        var int new_x;

        let new_x = head.x() + 1;
        if (~grid.collision(new_x, head.y())) {
            
            do deleteTailSegment();
            do addSegment(new_x, head.y());
            return true;
        } else {
            if (grid.isApple(new_x, head.y())) {
                // eat apple
                do grid.eatApple();
                let apples_eaten = apples_eaten + 1;
                // add new snake segment at apple
                do addSegment(new_x, head.y());
                // spawn new apple
                if (grid.spawnApple()) {
                    return true;
                }
            }
            return false;
        }
    }

    /**
     * Move the snake one block left. If a collision occurs, return
     * false and do not move the snake
     */
    method boolean moveLeft() {
        var int new_x;

        let new_x = head.x() - 1;
        if (~grid.collision(new_x, head.y())) {
            
            do deleteTailSegment();
            do addSegment(new_x, head.y());
            return true;
        } else {
            if (grid.isApple(new_x, head.y())) {
                // eat apple
                do grid.eatApple();
                let apples_eaten = apples_eaten + 1;
                // add new snake segment at apple
                do addSegment(new_x, head.y());
                // spawn new apple
                if (grid.spawnApple()) {
                    return true;
                }
            }
            return false;
        }
    }

    /**
     * Move the snake one block up. If a collision occurs, return
     * false and do not move the snake
     */
    method boolean moveUp() {
        var int new_y;

        let new_y = head.y() - 1;
        if (~grid.collision(head.x(), new_y)) {
            
            do deleteTailSegment();
            do addSegment(head.x(), new_y);
            return true;
        } else {
            if (grid.isApple(head.x(), new_y)) {
                // eat apple
                do grid.eatApple();
                let apples_eaten = apples_eaten + 1;
                // add new snake segment at apple
                do addSegment(head.x(), new_y);
                // spawn new apple
                if (grid.spawnApple()) {
                    return true;
                }
            }
            return false;
        }
    }

    /**
     * Move the snake one block down. If a collision occurs, return
     * false and do not move the snake
     */
    method boolean moveDown() {
        var int new_y;

        let new_y = head.y() + 1;
        if (~grid.collision(head.x(), new_y)) {
            do deleteTailSegment();
            do addSegment(head.x(), new_y);
            return true;
        } else {
            if (grid.isApple(head.x(), new_y)) {
                // eat apple
                do grid.eatApple();
                let apples_eaten = apples_eaten + 1;
                // add new snake segment at apple
                do addSegment(head.x(), new_y);
                // spawn new apple
                if (grid.spawnApple()) {
                    return true;
                }
            }
            return false;
        }
    }

    /** 
    * Free up memory
    */
    method void dispose() {
        var SnakeSegment current;
        var SnakeSegment next;

        let current = head;
        while (~(current = null)) {
            let next = current.getNext();
            do current.dispose();
            let current = next;
        }
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }
}