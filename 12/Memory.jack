// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array mem_ptr;
    static int free_ptr;

    /** Initializes the class. */
    function void init() {
        let mem_ptr = 0;
        let free_ptr = 2048;
        let mem_ptr[2048] = 14333;  // free segments (not including header fields)
        let mem_ptr[2049] = null;   // free_length.next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return mem_ptr[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem_ptr[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int ptr;
        var int free_list_node;

        let ptr = 0;                    // return value
        let free_list_node = free_ptr;

        while (~(free_list_node = 0)) {
            if ((free_list_node[0]) > size) {
                // begining of block = free_list_node + num_free_segs + 1 - size
                let ptr = free_list_node + free_list_node[0] + 1 - size;
                let ptr[0] = size;
                let free_list_node[0] = free_list_node[0] - size - 2;
                let free_list_node = 0;
            } else {
                let free_list_node = free_list_node[1];
            }
        }
        return ptr + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int segment_base;

        let segment_base = o - 2;
        let segment_base[1] = free_ptr;
        let free_ptr = segment_base;
        return;
    }    
}
