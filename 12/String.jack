// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int max_len;
    field int curr_len;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength);
        let curr_len = 0;
        let max_len = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curr_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (curr_len < max_len) {
            let str[curr_len] = c;
            let curr_len = curr_len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (curr_len > 0) {
            let curr_len = curr_len - 1;
            let str[curr_len] = 0;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var bool is_negative, is_digit;
        var int ret_val;
        var int i;

        if (curr_len = 0) {
            return 0;
        }

        let ret_val = 0;

        if (curr_len > str[0] = 45) {
            let is_negative = true;
            let i = 1;
        } else {
            let is_negative = false;
            let i = 0;
        }

        let is_digit = true;        // loop control

        while ((i < curr_len) & is_digit) {
            if ((str[i] > 47) & (str[i] < 58)) {
                let ret_val = (ret_val * 10) + (str[i] - 48);
                let i = i + 1;
            } else {
                let is_digit = false;
            }
        }
        if (is_negative) {
            return -ret_val;
        }
        return ret_val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return "c";
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 0;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 0;
    }
}
